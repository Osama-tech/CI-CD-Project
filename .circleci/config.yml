version: 2.1
orbs:
  slack: circleci/slack@4.1
  
  
commands:
  destroy_environment:
    description: Delete the font & back end stacks
    parameters:
      workflow_id: 
        type: string
      event: 
        type: string
    steps:
      - run:
          name: Destroy environment << parameters.workflow_id >>
          when: << parameters.event >>
          command: |
            echo "Destroying Environment # << parameters.workflow_id >> " 
            aws cloudformation delete-stack --stack-name ci-cd-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name ci-cd-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  cancel_migrations:
    description: cancel last migration  step if successfully run in the current workflow.
    parameters:
      workflow_id: 
        type: string
      event: 
        type: string
      
    steps:
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/4VnmEQtb22mcDLVUwHnG5q/migration_$\{CIRCLE_WORKFLOW_ID:0:7\})
            if [[ $SUCCESS == 1 ]];
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert #revert the successful migration
            fi          


jobs:
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
    
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
           # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here  
             cd backend
             npm install
             npm run build
            # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: front-end test
          command: |
             cd frontend
             npm install
             npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: back-end test
          command: |
             cd backend
             npm install
             npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: front-end test
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: back-end test
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      
      - run: 
          name: install tar & gzip
          command: |
            yum -y install tar
            yum -y install gzip

            
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "ci-cd-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
                
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "ci-cd-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
                
      - run:
         name: Add the EC2 instance IP to the Ansible inventory
         command: |
           aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt              
                
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt                
                # Here's where you will add some code to rollback on failure  
                
                
  configure-infrastructure:
    docker:
      - image: python:3.8-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c5:65:97:43:aa:db:fe:be:b9:87:24:5e:83:30:da:a6"] 

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            
      - run:
          name: Install dependencies
          command: |
            apk add --update tar
            apk add --update gzip
            apk add --update ansible
            
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
              
              
  run-migrations:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
          
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
               curl https://kvdb.io/HRdpkMwzTLpsUpsLBN2Z1f/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi            
                # Here's where you will add some code to rollback on failure   
     
     
 
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            curl -fsSL https://rpm.nodesource.com/setup_13.x | bash - && yum -y install nodejs tar gzip
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            echo ${API_URL} > ~/api_url.txt
            cat ~/api_url.txt
            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install 
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            echo id: ${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            
            
      - persist_to_workspace:
          root: ~/
          paths:
            - api_url.txt
            
            
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
          
      - cancel_migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
                     
  Deploy-Backend:
    docker:
      - image: circleci/node:13.8.0 # Docker image here that supports Ansible
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["c5:65:97:43:aa:db:fe:be:b9:87:24:5e:83:30:da:a6"]
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt     

      - run:
          name: Install dependencies
          command: |
            sudo apt-get update -y
            sudo apt-get install -y python3
            sudo apt-get install -y awscli tar ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is ------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
            
      - destroy_environment: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
          
      - cancel_migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
      
#   smoke-test:
#     docker:
#       - image: alpine:latest
#     steps:
#       - checkout
#       - attach_workspace:
#           at: ~/
          
#       - run:
#           name: Install dependencies
#           command: |
#             sudo apt-get update -y
#             sudo apt-get install -y awscli
            
#       - run:
#           name: Backend smoke test.
#           command: |
#             #export BACKEND_IP=$(aws ec2 describe-instances \
#             #  --query 'Reservations[*].Instances[*].PublicIpAddress' \
#             #  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#             #  --output text)
#             #export API_URL="http://${BACKEND_IP}:3030"
#             cat ~/api_url.txt
#             export API_URL=$(cat ~/api_url.txt)
#             echo "Api Url =>  ${API_URL}"
#             if curl -s ${API_URL}/api/status | grep "ok"
#             then
#                 return 0
#             else
#                 return 1
#             fi
          
#             cat ~/api_url.txt
#             export API_URL=$(cat ~/api_url.txt)

            
           
#       - run:
#           name: Frontend smoke test.
#           command: |
#               if curl -s http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees | grep "Welcome"
#               then
#                 exit 0
#               else
#                 exit 1
#               fi

  smoke-test:
    docker:
     - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
           apk add curl
           apk add --update nodejs npm
           pip3 install awscli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values= backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            echo "${API_URL}"
            #curl "${API_URL}/api/status" | grep "ok"
      - run:
          name: Frontend smoke test.
          command: |
            
           URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
           echo ${URL} 
           if curl -s ${URL} | grep "Welcome"
           then
               # Change this to 0 after the job fails
             return 0
           else
             return 1
           fi
            
      - destroy_environment: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
          
      - cancel_migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
      
  cloudfront-update:
    docker:
      - image: cimg/base:stable 
    steps:
      - checkout
      - run:
          name: install_awscli
          command: |
            sudo apt update
            sudo apt install awscli -y
              
      - run: 
          name:  Install Node.JS 
          command: | 
            sudo apt update
            sudo apt install nodejs
            sudo apt install npm
           
      - run:
          name: Save Old Workflow ID TO Kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                            --no-paginate --output text)
            echo "Old Workflow ID: $OLD_WORKFLOW_ID"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            curl https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
             --template-file .circleci/files/cloudfront.yml \
             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
             --stack-name initialStack
             
      - destroy_environment: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
          
      - cancel_migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text| cut -d '-' -f 2)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}" 
            
      - run:
          name: Remove old stacks and files
          command: |
           if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              #aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
            fi
        
        
workflows:
  default:
    jobs:
     # - notify:
      #    context: CICD slack-secrets
      - build-frontend
      - build-backend
      - test-frontend:
          requires: 
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires: 
            - build-frontend
      - scan-backend:
          requires: 
            - build-backend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - Deploy-Backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [Deploy-Backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
